<script>
  document.addEventListener("DOMContentLoaded", () => {
    const windows = document.querySelectorAll<HTMLDivElement>(".window");
    let activeWindow: HTMLDivElement | null = null;
    let selectedWindow: HTMLDivElement | null = null;
    const gaps = 12;

    // Window focus management
    windows.forEach((window) => {
      window.addEventListener("mousedown", () => {
        windows.forEach((w) => (w.style.zIndex = "1"));
        window.style.zIndex = "10";
        setActiveWindow(window);
      });
    });

    function setActiveWindow(window: HTMLDivElement | null) {
      windows.forEach((w) => w.classList.remove("active-window"));
      activeWindow = window;
      if (activeWindow) {
        activeWindow.classList.add("active-window");
      }
    }

    function setSelectedWindow(window: HTMLDivElement | null) {
      windows.forEach((w) => w.classList.remove("selected-window"));
      selectedWindow = window;
      if (selectedWindow) {
        selectedWindow.classList.add("selected-window");
      }
    }

    // Window management with keyboard
    document.addEventListener("keydown", (e) => {
      if (!activeWindow && !selectedWindow) return;

      const workspace = document.querySelector<HTMLElement>("main");
      if (!workspace) return;

      // Select windows with Shift + Arrow keys
      if (e.shiftKey) {
        e.preventDefault();
        const currentWindow = selectedWindow || activeWindow;
        if (!currentWindow) return;

        const currentRect = currentWindow.getBoundingClientRect();
        const otherWindows = Array.from(windows).filter(
          (w) => w !== currentWindow
        );

        let nextWindow: HTMLDivElement | null = null;
        let minDistance = Infinity;

        otherWindows.forEach((window) => {
          const rect = window.getBoundingClientRect();

          switch (e.key) {
            case "ArrowLeft": {
              if (
                rect.right < currentRect.left &&
                rect.top < currentRect.bottom &&
                rect.bottom > currentRect.top
              ) {
                const distance = currentRect.left - rect.right;
                if (distance < minDistance) {
                  minDistance = distance;
                  nextWindow = window;
                }
              }
              break;
            }
            case "ArrowRight": {
              if (
                rect.left > currentRect.right &&
                rect.top < currentRect.bottom &&
                rect.bottom > currentRect.top
              ) {
                const distance = rect.left - currentRect.right;
                if (distance < minDistance) {
                  minDistance = distance;
                  nextWindow = window;
                }
              }
              break;
            }
            case "ArrowUp": {
              if (
                rect.bottom < currentRect.top &&
                rect.left < currentRect.right &&
                rect.right > currentRect.left
              ) {
                const distance = currentRect.top - rect.bottom;
                if (distance < minDistance) {
                  minDistance = distance;
                  nextWindow = window;
                }
              }
              break;
            }
            case "ArrowDown": {
              if (
                rect.top > currentRect.bottom &&
                rect.left < currentRect.right &&
                rect.right > currentRect.left
              ) {
                const distance = rect.top - currentRect.bottom;
                if (distance < minDistance) {
                  minDistance = distance;
                  nextWindow = window;
                }
              }
              break;
            }
          }
        });

        if (nextWindow) {
          setSelectedWindow(nextWindow);
          setActiveWindow(nextWindow);
        }
      }

      // Move windows with Alt + Arrow keys
      if (e.altKey) {
        e.preventDefault();
        const targetWindow = selectedWindow || activeWindow;
        if (!targetWindow) return;

        switch (e.key) {
          case "ArrowLeft":
            swapWithNeighbor(targetWindow, "left");
            break;
          case "ArrowRight":
            swapWithNeighbor(targetWindow, "right");
            break;
          case "ArrowUp":
            swapWithNeighbor(targetWindow, "up");
            break;
          case "ArrowDown":
            swapWithNeighbor(targetWindow, "down");
            break;
        }
      }

      // Resize windows with Ctrl + Arrow keys
      if (e.ctrlKey) {
        e.preventDefault();
        const targetWindow = selectedWindow || activeWindow;
        if (!targetWindow) return;

        const action = {
          ArrowLeft: "shrink-width",
          ArrowRight: "grow-width",
          ArrowUp: "shrink-height",
          ArrowDown: "grow-height",
        }[e.key] as
          | "grow-width"
          | "shrink-width"
          | "grow-height"
          | "shrink-height";

        if (action) {
          resizeWindowByPercent(targetWindow, action);
        }
      }
    });

    function swapWithNeighbor(
      window: HTMLDivElement,
      direction: "left" | "right" | "up" | "down"
    ) {
      const rect = window.getBoundingClientRect();
      const neighbors = Array.from(windows).filter((w) => w !== window);

      // Find the closest neighbor in the specified direction
      const neighbor = neighbors.reduce(
        (closest, current) => {
          const currentRect = current.getBoundingClientRect();

          // Check if the window is in the correct direction
          const isValidDirection =
            (direction === "left" && currentRect.right <= rect.left) ||
            (direction === "right" && currentRect.left >= rect.right) ||
            (direction === "up" && currentRect.bottom <= rect.top) ||
            (direction === "down" && currentRect.top >= rect.bottom);

          if (!isValidDirection) return closest;

          // Calculate distance between windows
          const distance = Math.hypot(
            currentRect.left +
              currentRect.width / 2 -
              (rect.left + rect.width / 2),
            currentRect.top +
              currentRect.height / 2 -
              (rect.top + rect.height / 2)
          );

          return !closest || distance < closest.distance
            ? { element: current, distance }
            : closest;
        },
        null as { element: HTMLDivElement; distance: number } | null
      );

      if (neighbor) {
        // Swap positions with the neighbor
        const windowPos = {
          left: window.style.left,
          top: window.style.top,
          width: window.style.width,
          height: window.style.height,
        };

        const neighborElement = neighbor.element;
        window.style.left = neighborElement.style.left;
        window.style.top = neighborElement.style.top;
        window.style.width = neighborElement.style.width;
        window.style.height = neighborElement.style.height;

        neighborElement.style.left = windowPos.left;
        neighborElement.style.top = windowPos.top;
        neighborElement.style.width = windowPos.width;
        neighborElement.style.height = windowPos.height;
      }
    }

    function resizeWindowByPercent(targetWindow: HTMLDivElement, action: 'grow-width' | 'shrink-width' | 'grow-height' | 'shrink-height') {
        const workspace = document.querySelector<HTMLElement>('main');
        if (!workspace) return;
        
        const workspaceRect = workspace.getBoundingClientRect();
        const percent = 0.05;
        const minSize = 200;
        const tolerance = 25;
        
        // Calculate resize amount - 5% of total workspace size
        const resizeAmount = action.includes('width')
            ? workspaceRect.width * percent
            : workspaceRect.height * percent;

        // Get all windows and their current positions
        const allWindows = Array.from(document.querySelectorAll<HTMLDivElement>('.window'));
        
        // Define window data type for TypeScript
        interface WindowData {
            window: HTMLDivElement;
            rect: DOMRect;
            left: number;
            right: number;
            top: number;
            bottom: number;
            width: number;
            height: number;
        }
        
        // First, convert all window positions to be relative to the workspace
        // This is critical for proper tiling calculations
        const windowsData: WindowData[] = allWindows.map(w => {
            const rect = w.getBoundingClientRect();
            return {
                window: w,
                rect,
                left: rect.left - workspaceRect.left,
                right: rect.right - workspaceRect.left,
                top: rect.top - workspaceRect.top,
                bottom: rect.bottom - workspaceRect.top,
                width: rect.width,
                height: rect.height
            };
        });
        
        const targetData = windowsData.find(data => data.window === targetWindow)!;
        
        // For horizontal resizing
        if (action.includes('width')) {
            // Find windows that are on the same horizontal level (same row)
            const sameRowWindows = windowsData.filter(data => 
                data.window !== targetWindow && 
                Math.min(data.bottom, targetData.bottom) > Math.max(data.top, targetData.top)
            );
            
            // Find directly adjacent window to resize with 
            let adjacentWindow: WindowData | null = null;
            
            if (action === 'grow-width') {
                // When growing, find window to the right
                const rightWindows = sameRowWindows
                    .filter(data => Math.abs(data.left - targetData.right) <= tolerance);
                
                adjacentWindow = rightWindows.length > 0 
                    ? rightWindows.sort((a, b) => a.left - b.left)[0] 
                    : null;
                
                if (adjacentWindow && adjacentWindow.width > minSize + resizeAmount) {
                    // Grow target, shrink adjacent
                    targetWindow.style.width = `${targetData.width + resizeAmount}px`;
                    adjacentWindow.window.style.width = `${adjacentWindow.width - resizeAmount}px`;
                    adjacentWindow.window.style.left = `${adjacentWindow.left + resizeAmount}px`;
                }
            } else { // shrink-width
                // When shrinking, find window to the right
                const rightWindows = sameRowWindows
                    .filter(data => Math.abs(data.left - targetData.right) <= tolerance);
                
                adjacentWindow = rightWindows.length > 0 
                    ? rightWindows.sort((a, b) => a.left - b.left)[0] 
                    : null;
                
                if (adjacentWindow && targetData.width > minSize + resizeAmount) {
                    // Shrink target, grow adjacent
                    targetWindow.style.width = `${targetData.width - resizeAmount}px`;
                    adjacentWindow.window.style.width = `${adjacentWindow.width + resizeAmount}px`;
                    adjacentWindow.window.style.left = `${adjacentWindow.left - resizeAmount}px`;
                }
            }
            
            // If no window to right, check for window to left
            if (!adjacentWindow) {
                const leftWindows = sameRowWindows
                    .filter(data => Math.abs(data.right - targetData.left) <= tolerance);
                
                const leftAdjacent = leftWindows.length > 0
                    ? leftWindows.sort((a, b) => b.right - a.right)[0]
                    : null;
                
                if (leftAdjacent) {
                    if (action === 'grow-width' && leftAdjacent.width > minSize + resizeAmount) {
                        // Grow target by shrinking left window
                        targetWindow.style.width = `${targetData.width + resizeAmount}px`;
                        targetWindow.style.left = `${targetData.left - resizeAmount}px`;
                        leftAdjacent.window.style.width = `${leftAdjacent.width - resizeAmount}px`;
                    } else if (action === 'shrink-width') {
                        // Shrink target, grow left window
                        targetWindow.style.width = `${targetData.width - resizeAmount}px`;
                        targetWindow.style.left = `${targetData.left + resizeAmount}px`;
                        leftAdjacent.window.style.width = `${leftAdjacent.width + resizeAmount}px`;
                    }
                }
            }
        } else {
            // Vertical resizing - find windows in same column
            const sameColWindows = windowsData.filter(data => 
                data.window !== targetWindow && 
                Math.min(data.right, targetData.right) > Math.max(data.left, targetData.left)
            );
            
            // Find directly adjacent window to resize with
            let adjacentWindow: WindowData | null = null;
            
            if (action === 'grow-height') {
                // When growing, find window below
                const belowWindows = sameColWindows
                    .filter(data => Math.abs(data.top - targetData.bottom) <= tolerance);
                
                adjacentWindow = belowWindows.length > 0 
                    ? belowWindows.sort((a, b) => a.top - b.top)[0] 
                    : null;
                
                if (adjacentWindow && adjacentWindow.height > minSize + resizeAmount) {
                    // Grow target, shrink adjacent
                    targetWindow.style.height = `${targetData.height + resizeAmount}px`;
                    adjacentWindow.window.style.height = `${adjacentWindow.height - resizeAmount}px`;
                    adjacentWindow.window.style.top = `${adjacentWindow.top + resizeAmount}px`;
                }
            } else { // shrink-height
                // When shrinking, find window below
                const belowWindows = sameColWindows
                    .filter(data => Math.abs(data.top - targetData.bottom) <= tolerance);
                
                adjacentWindow = belowWindows.length > 0 
                    ? belowWindows.sort((a, b) => a.top - b.top)[0] 
                    : null;
                
                if (adjacentWindow && targetData.height > minSize + resizeAmount) {
                    // Shrink target, grow adjacent
                    targetWindow.style.height = `${targetData.height - resizeAmount}px`;
                    adjacentWindow.window.style.height = `${adjacentWindow.height + resizeAmount}px`;
                    adjacentWindow.window.style.top = `${adjacentWindow.top - resizeAmount}px`;
                }
            }
            
            // If no window below, check for window above
            if (!adjacentWindow) {
                const aboveWindows = sameColWindows
                    .filter(data => Math.abs(data.bottom - targetData.top) <= tolerance);
                
                const aboveAdjacent = aboveWindows.length > 0
                    ? aboveWindows.sort((a, b) => b.bottom - a.bottom)[0]
                    : null;
                
                if (aboveAdjacent) {
                    if (action === 'grow-height' && aboveAdjacent.height > minSize + resizeAmount) {
                        // Grow target by shrinking window above
                        targetWindow.style.height = `${targetData.height + resizeAmount}px`;
                        targetWindow.style.top = `${targetData.top - resizeAmount}px`;
                        aboveAdjacent.window.style.height = `${aboveAdjacent.height - resizeAmount}px`;
                    } else if (action === 'shrink-height') {
                        // Shrink target, grow window above
                        targetWindow.style.height = `${targetData.height - resizeAmount}px`;
                        targetWindow.style.top = `${targetData.top + resizeAmount}px`;
                        aboveAdjacent.window.style.height = `${aboveAdjacent.height + resizeAmount}px`;
                    }
                }
            }
        }
    }
  });
</script>
